1/Définition d'une fonction pure :
une fonction pure ne dépend pas et ne modifie pas l'état de variables hors de sa portée.
En pratique, cela signifie qu'une fonction pure retourne toujours le même résultat avec des paramètres identiques.
Son exécution ne dépend pas de l’état du système.

C'est-à-dire elle possède  les propriétés suivantes :
1.	Sa valeur de retour est la même pour les mêmes arguments (pas de variation avec des variables statiques locales, des variables non locales, des arguments mutables de type référence ou des flux d'entrée).
2.	Son évaluation n'a pas d'effets de bord :

En informatique, une fonction est dite à effet de bord (effet secondaire )si elle modifie un état en dehors de son environnement local,
c'est-à-dire a une interaction observable avec le monde extérieur autre que retourner une valeur. 
Par exemple, les fonctions qui modifient une variable locale statique, une variable non locale ou un argument mutable passé par référence,
les fonctions qui effectuent des opérations d'entrées-sorties ou les fonctions appelant d'autres fonctions à effet de bord1.
Souvent, ces effets compliquent la lisibilité du comportement des programmes et/ou nuisent à la réutilisabilité des fonctions et procédures.
2/L’avantage principal d'une fonction pure:
l'appel à cette fonction avec les même paramètres renverra toujours le même résultat. 
On simplifie également la mise en place des tests automatiques, ce qui sécurise notre application.
3/Exemples de Fonctions pures en en C :
Les fonctions arithmétiques sont l'archétype des fonctions pures.
Les fonction  suivantes sont pures :

  1.La fonction floor : retournant la partie entière par défaut d'un nombre :
Cette fonction retourne la valeur minimale d'un nombre, soit l'entier le plus proche inférieur ou égal au nombre.

 Syntaxe : double floor(double n);
  " le parametre n permet d'indiquer l'expression contenant le nombre à traiter."
Voici un exemple montrant une utilisation plus classique de cette fonction :
 #include <stdio.h>
#include <stdlib.h>
#include <math.h>
 
int main()
{
    printf("FLOOR(1)=%f\n",floor(1));
    printf("FLOOR(1.1)=%f\n",floor(1.1));
    printf("FLOOR(1.7)=%f\n",floor(1.7));
    printf("FLOOR(-1)=%f\n",floor(-1));
    printf("FLOOR(-1.1)=%f\n",floor(-1.1));
    printf("FLOOR(-1.7)=%f\n",floor(-1.7));
    return 0;
}
on obtiendra le résultat suivant :

FLOOR(1)=1
FLOOR(1.1)=1
FLOOR(1.7)=1
FLOOR(-1)=-1
FLOOR(-1.1)=-2
FLOOR(-1.7)=-2
    
  2.La fonction max(resp.min)  retournant le maximum(resp.minimum ) de deux variable:
#include <stdio.h>
 
main()
{
 double MIN(double X, double Y);
 double MAX(double X, double Y);
 double A,B,;
 printf("Introduire 2 réels : ");
 scanf("%lf %lf ", &A, &B);
 printf("Le minimum des 2 réels est %f \n",
                                    MIN(A,B );  
  printf("Le maximum des 2 réels est %f \n",
                                    MAX( A,B ); 
  return 0;
}
double MIN(double X, double Y) 
{
 if (X<Y)
     return X;
 else
     return Y;
}
double MAX(double X, double Y)
{
 if (X>Y)
     return X;
 else
     return Y;
}
 
  3.La fonction sinus :
Syntaxe : double sin(double x)
Paramètres : x	Ce paramètre permet d'indiquer l'expression contenant le nombre à traiter
Description :Cette fonction trigonométrique retourne le «Sinus».
Voici un exemple permet d'afficher les Sinus inférieurs à π :
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
int main()
{
    float I = 0;
    while(I < M_PI) {
        printf("Sin(%f)=%f\n",I,sin(I));
        I += 0.1;
    }
    return 0;
}
