Aujourd'huit:
1-la notion de fonction pures : voir sur wikipédia et faire des exemples des focntion simples non pures ->'done'
2-faire un plugin LLVM : voir sur wikipédia et Youtube
3-esseyer implementer un exemple de plugin en se basant sur des exemple existant sur internet


1-Fonction Pures:
DEF1:
-une fonction pure est une fonction qui ne modifier pas la valeur des variables du programmes(pas de variation de la valeur de retour avec tous les variables de programmes(soit local a la fonction ou globale)) et son evaluation n'a pas d'effet de bord c-à-d ne change pas un etat en dehors de son environement local , 2 cas de variations des variables qui seront renvoié par la fonction -> fonction non pures :

cas 1: la variation des variables se fait à l'exterieur de la fonction
cas 2: la variation des variables se fait à l'interieur de la fonction

DEF2:
siune fonction est :
   -deterministe c-à-d elle produit tjrs le mm resultat pour une entrée particuliere (une fonction non-deterministe sa sortie depend de quelque chose d'autre).
   -n'a pas d'ffet de bord(NO SIDE EFFECT)
alors, est une fonction pure.

-Les fonctions deterministes sont meilleur à bien des egards
-si une fct peut etre deterministe, elle devrait l'etre
-les fcts deterministes sont prévisibles, moins fragiles et plus faciles à envisager, leur utilisation est egalement plus facile en -construisant des structures et des programmes complexes
-comme les fcts deterministes produisnt tjrs la mm sortie pour la mm entrée, elles etre optimisés: ils peuvent se souvenir de la sortie pour une certaines entrée, et la prochaines fois que cette mm entrée sera utilisé, il suffit de retourné la valeur mémorisée au lieu de refaire le calcule.

exemples de fonction pure : floor(double x){return (int)x;}
			    max(double x,double y){//test; return max(x, y);}
			    sin(double x){return sin(x);}
exemples de fonction non-pures (les cas où la focntion n'est pas pure : 
								 int f(){return x;}//variation d'une variable non local
								 int f(int *x){return *x;}//variation d'un argument mutable de type reference
								 int f(){int x=0; std::cin >> x; return x;}//variation d'un flux d'entrée

								 void f(){static int x=0; ++x;}//modification d'une variable static locale
								 void f(){ ++x;}//modification d'une variable non locale
								 void f(int *x){++*x;}//modification d'une variable de type reference
								 void f(){std::cout << "hello world" << endl;}//mutation de flus de sortie


2- Clang Plugin :
c quoi clang AST 



